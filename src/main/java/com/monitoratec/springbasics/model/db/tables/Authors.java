/*
 * This file is generated by jOOQ.
*/
package com.monitoratec.springbasics.model.db.tables;


import com.monitoratec.springbasics.model.db.DefaultSchema;
import com.monitoratec.springbasics.model.db.Indexes;
import com.monitoratec.springbasics.model.db.Keys;
import com.monitoratec.springbasics.model.db.tables.records.AuthorsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Authors extends TableImpl<AuthorsRecord> {

    private static final long serialVersionUID = -445491220;

    /**
     * The reference instance of <code>AUTHORS</code>
     */
    public static final Authors AUTHORS = new Authors();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuthorsRecord> getRecordType() {
        return AuthorsRecord.class;
    }

    /**
     * The column <code>AUTHORS.ID</code>.
     */
    public final TableField<AuthorsRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>AUTHORS.NAME</code>.
     */
    public final TableField<AuthorsRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * Create a <code>AUTHORS</code> table reference
     */
    public Authors() {
        this(DSL.name("AUTHORS"), null);
    }

    /**
     * Create an aliased <code>AUTHORS</code> table reference
     */
    public Authors(String alias) {
        this(DSL.name(alias), AUTHORS);
    }

    /**
     * Create an aliased <code>AUTHORS</code> table reference
     */
    public Authors(Name alias) {
        this(alias, AUTHORS);
    }

    private Authors(Name alias, Table<AuthorsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Authors(Name alias, Table<AuthorsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.AUTHORS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AuthorsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_AUTHORS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AuthorsRecord> getPrimaryKey() {
        return Keys.KEY_AUTHORS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AuthorsRecord>> getKeys() {
        return Arrays.<UniqueKey<AuthorsRecord>>asList(Keys.KEY_AUTHORS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Authors as(String alias) {
        return new Authors(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Authors as(Name alias) {
        return new Authors(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Authors rename(String name) {
        return new Authors(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Authors rename(Name name) {
        return new Authors(name, null);
    }
}
